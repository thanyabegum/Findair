{"version":3,"sources":["components/Flights.js","components/SearchBar.js","images/logo.svg","components/Header.js","App.js","reportWebVitals.js","index.js"],"names":["Flight","props","className","price","nonstop","key","Flights","flights","map","flight","Direct","MinPrice","QuoteId","SearchBar","useState","originPlaces","setOriginPlaces","destPlaces","setDestPlaces","originValue","setOriginValue","destValue","setDestValue","Date","outboundDate","setOutboundDate","inboundDate","setInboundDate","showInboundInput","setShowInboundInput","currency","setCurrency","currencies","setCurrencies","setFlights","showFlights","setShowFlights","sortAsc","setSortAsc","sortType","setSortType","sortOptions","label","value","getOriginOptions","origin","a","reqOptions","method","headers","process","fetch","URLSearchParams","query","response","json","console","log","Places","fetchOrigins","getDestOptions","dest","fetchDests","useEffect","Currencies","fetchCurrencies","getCurrencies","InboundInput","id","htmlFor","name","placeholderText","todayButton","selected","onChange","date","required","SortSelect","isSearchable","defaultValue","option","slice","reverse","options","placeholder","onSubmit","e","toString","getFullYear","getMonth","getDate","localInboundDate","inboundpartialdate","Quotes","preventDefault","fetchFlights","isClearable","backspaceRemovesValue","actionMeta","action","PlaceId","PlaceName","onInputChange","inputValue","getOptionLabel","getOptionValue","filterOption","onClick","Code","Header","href","src","Logo","alt","title","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0cddc025.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Flights.css';\r\n\r\nconst Flight = (props) => {\r\n    return (\r\n        <div className=\"flight\" key={props.key}>\r\n            <h2>${props.price}</h2>\r\n            <p>{props.nonstop}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction Flights(props) { \r\n    return(\r\n        <div className=\"flights\">\r\n            {props.flights ? props.flights.map(flight => {\r\n                return (\r\n                    <Flight \r\n                        key={flight.QuoteId}\r\n                        nonstop={flight.Direct ? \"Nonstop\" : \"\"}\r\n                        price={flight.MinPrice}\r\n                    />\r\n                )\r\n            }) : <h2>No Flights.</h2>}\r\n         </div>\r\n    )\r\n}\r\n\r\nexport default Flights;","import React, { useState, useEffect } from 'react';\r\nimport './SearchBar.css';\r\nimport Flights from './Flights';\r\nimport Select from 'react-select';\r\nimport DatePicker from 'react-datepicker';\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\n\r\n/* Center search bar consisting of input fields, buttons, and dropdowns.\r\n   On click of search button, a list of flights will pop up. */\r\nfunction SearchBar() { \r\n    // Origin/Destination State Variables\r\n    const [originPlaces,setOriginPlaces] = useState([])\r\n    const [destPlaces,setDestPlaces] = useState([])\r\n    const [originValue, setOriginValue] = useState(\"\")\r\n    const [destValue, setDestValue] = useState(\"\")\r\n\r\n    // Outbound/Inbound Date State Variables \r\n    const [outboundDate,setOutboundDate] = useState(new Date())\r\n    const [inboundDate, setInboundDate] = useState(new Date())\r\n    const [showInboundInput, setShowInboundInput] = useState(false)\r\n\r\n    // Currency State Variables\r\n    const [currency, setCurrency] = useState(\"USD\")\r\n    const [currencies, setCurrencies] = useState([])\r\n\r\n    // Flights State Variables \r\n    const [flights, setFlights] = useState([])\r\n    const [showFlights,setShowFlights] = useState(false)\r\n\r\n    // Sort State Variables\r\n    const [sortAsc, setSortAsc] = useState(true)\r\n    const [sortType, setSortType] = useState([])\r\n    const sortOptions = [\r\n        { label: \"Price: Low to High\", value: \"true\" },\r\n        { label: \"Price: High to Low\", value: \"false\" }\r\n    ]\r\n    \r\n    /* On form submission, fetch flights according to origin, dest., and dates */\r\n    function handleSubmit(e) {\r\n        e.preventDefault() // Prevent page from refreshing after submit\r\n\r\n        /* Convert date object to appropriate string format: YYYY-MM-DD */\r\n        function toString(date) {\r\n            return date.getFullYear() + '-' + ((date.getMonth() + 1) < 10 ? \r\n                '0' + (date.getMonth() + 1) : (date.getMonth() + 1)) + '-' + \r\n                date.getDate()\r\n        }\r\n\r\n        // Since InboundDate is of type Date, create a local version that's a string \r\n        let localInboundDate\r\n        if (showInboundInput) localInboundDate = toString(inboundDate)\r\n        else localInboundDate = \"anytime\"\r\n\r\n        async function fetchFlights() {\r\n            const reqOptions = {\r\n                method: 'GET',\r\n                headers: {\r\n                    \"x-rapidapi-key\": `${process.env.REACT_APP_API_KEY}`,\r\n                    \"x-rapidapi-host\": \"skyscanner-skyscanner-flight-search-v1.p.rapidapi.com\"\r\n                }\r\n            }\r\n            let response = await fetch(`https://skyscanner-skyscanner-flight-search-v1.p.rapidapi.com/apiservices/browsequotes/v1.0/US/${currency}/en-US/${originValue}/${destValue}/${toString(outboundDate)}/?` + new URLSearchParams({inboundpartialdate: localInboundDate}), reqOptions)\r\n            response = await response.json()\r\n            console.log(response)\r\n            setFlights(response.Quotes)\r\n            setSortType(sortOptions[0])\r\n            setSortAsc(true)\r\n        }\r\n\r\n        fetchFlights()\r\n        setShowFlights(true)\r\n    }\r\n\r\n    // Origin Handler Functions\r\n    /* Sets originValue according to value of option selected, then updates origin options */\r\n    const handleOriginChange = (option, actionMeta) => {\r\n        actionMeta.action === \"clear\" ? setOriginValue(\"\") : setOriginValue(option.PlaceId)\r\n        getOriginOptions(option ? option.PlaceName : \"\")\r\n    }\r\n    \r\n    /* Updates origin options by fetching places that match the current originValue */\r\n    function getOriginOptions(origin) {\r\n        async function fetchOrigins() {\r\n            const reqOptions = {\r\n                method: 'GET',\r\n                headers: {\r\n                    \"x-rapidapi-key\": `${process.env.REACT_APP_API_KEY}`,\r\n                    \"x-rapidapi-host\": \"skyscanner-skyscanner-flight-search-v1.p.rapidapi.com\",\r\n                    \"useQueryString\": true\r\n                }\r\n            }\r\n            let response = await fetch(`https://skyscanner-skyscanner-flight-search-v1.p.rapidapi.com/apiservices/autosuggest/v1.0/US/${currency}/en-US/?` + new URLSearchParams({query: origin }), reqOptions)\r\n            response = await response.json()\r\n            console.log(response.Places)\r\n            setOriginPlaces(response.Places)\r\n        }\r\n\r\n        fetchOrigins()\r\n    }\r\n\r\n    // Destination Handler Functions\r\n    /* Sets destValue according to value of option selected, then updates destination options */\r\n    const handleDestChange = (option, actionMeta) => {\r\n        actionMeta.action === \"clear\" ? setDestValue(\"\") : setDestValue(option.PlaceId)\r\n        getDestOptions(option ? option.PlaceName : \"\")\r\n    }\r\n\r\n    /* Updates origin options by fetching places that match the current originValue */\r\n    function getDestOptions(dest) {\r\n        async function fetchDests() {\r\n            const reqOptions = {\r\n                method: 'GET',\r\n                headers: {\r\n                    \"x-rapidapi-key\": `${process.env.REACT_APP_API_KEY}`,\r\n                    \"x-rapidapi-host\": \"skyscanner-skyscanner-flight-search-v1.p.rapidapi.com\",\r\n                    \"useQueryString\": true\r\n                }\r\n            }\r\n            let response = await fetch(`https://skyscanner-skyscanner-flight-search-v1.p.rapidapi.com/apiservices/autosuggest/v1.0/US/${currency}/en-US/?` + new URLSearchParams({query: dest }), reqOptions)\r\n            response = await response.json()\r\n            console.log(response.Places)\r\n            setDestPlaces(response.Places)\r\n        }\r\n        \r\n        fetchDests()\r\n    }\r\n\r\n    // Currency Functions\r\n    /* Fetch list of currencies */\r\n    const getCurrencies = () => {\r\n        async function fetchCurrencies() {\r\n            const reqOptions = {\r\n                method: 'GET',\r\n                headers: {\r\n                    \"x-rapidapi-key\": `${process.env.REACT_APP_API_KEY}`,\r\n                    \"x-rapidapi-host\": \"skyscanner-skyscanner-flight-search-v1.p.rapidapi.com\",\r\n                    \"useQueryString\": true\r\n                }\r\n            }\r\n            let response = await fetch(\"https://skyscanner-skyscanner-flight-search-v1.p.rapidapi.com/apiservices/reference/v1.0/currencies\", reqOptions)\r\n            response = await response.json()\r\n            setCurrencies(response.Currencies)\r\n        }\r\n\r\n        fetchCurrencies()\r\n    }\r\n\r\n    /* Fetch list of currencies when state changes instead of every render */\r\n    useEffect(() => {\r\n        getCurrencies()\r\n    }, [])\r\n\r\n    // Input/Select Components\r\n    /* Input for inbound date. Hidden until Roundtrip is selected */\r\n    const InboundInput = () => {\r\n        return (\r\n            <div id=\"inboundDateInput\" className=\"searchInput\">\r\n                <label htmlFor=\"inboundDate\" className=\"visuallyHidden\">Return Date:</label>\r\n                <DatePicker \r\n                    id=\"inboundDate\"\r\n                    name=\"inboundDate\"\r\n                    placeholderText=\"Return Date\" \r\n                    todayButton=\"Today\"\r\n                    selected={inboundDate}\r\n                    onChange={date => setInboundDate(date)}\r\n                    required\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n\r\n    /* Dropdown for sort by price */\r\n    const SortSelect = () => {\r\n        /* Sorts according to option selected, then sets sortType and sortAsc */\r\n        const handleSortChange = option => {\r\n            // If the option is the different from last time, then reverse sort\r\n            option.value === sortAsc ? setFlights(flights) : setFlights(flights.slice().reverse())\r\n            setSortAsc(option.value)\r\n            setSortType(option)\r\n        }\r\n        \r\n        return (\r\n            <div>\r\n                <label htmlFor=\"sortSelect\" className=\"visuallyHidden\">Sort:</label>\r\n                <Select \r\n                    id=\"sortSelect\"\r\n                    name=\"sortSelect\"\r\n                    isSearchable=\"true\"\r\n                    value={sortType}\r\n                    defaultValue={sortOptions[0]}\r\n                    onChange={handleSortChange}\r\n                    options={sortOptions}\r\n                    placeholder=\"Sort\"\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div className=\"searchBar\">\r\n            {/* Main Search Bar */}\r\n            <form onSubmit={handleSubmit}>\r\n                <div id=\"originInput\" className=\"searchInput\">\r\n                    <label htmlFor=\"originSelect\" className=\"visuallyHidden\">Origin:</label>\r\n                    <Select \r\n                        id=\"originSelect\"\r\n                        name=\"originSelect\"\r\n                        className=\"placeSelect\"\r\n                        isClearable\r\n                        backspaceRemovesValue\r\n                        onChange={handleOriginChange}\r\n                        onInputChange={inputValue => getOriginOptions(inputValue)}\r\n                        options={originPlaces}\r\n                        getOptionLabel={({ PlaceName }) => PlaceName}\r\n                        getOptionValue={({ PlaceId }) => PlaceId}\r\n                        placeholder=\"Where from?\"\r\n                        filterOption={\"\"}\r\n                    />\r\n                </div>\r\n                <div id=\"destInput\" className=\"searchInput\">\r\n                    <label htmlFor=\"destSelect\" className=\"visuallyHidden\">Destination:</label>\r\n                    <Select \r\n                        id=\"destSelect\"\r\n                        name=\"destSelect\"\r\n                        className=\"placeSelect\"\r\n                        isClearable\r\n                        backspaceRemovesValue\r\n                        onChange={handleDestChange}\r\n                        onInputChange={inputValue => getDestOptions(inputValue)}\r\n                        options={destPlaces}\r\n                        getOptionLabel={({ PlaceName }) => PlaceName}\r\n                        getOptionValue={({ PlaceId }) => PlaceId}\r\n                        placeholder=\"Where to?\"\r\n                        filterOption={\"\"}\r\n                    />\r\n                </div>\r\n                <div id=\"outboundDateInput\" className=\"searchInput\">\r\n                    <label htmlFor=\"outboundDate\" className=\"visuallyHidden\">Departure Date:</label>\r\n                    <DatePicker \r\n                        id=\"outboundDate\"\r\n                        name=\"outboundDate\"\r\n                        placeholderText=\"Departure Date\" \r\n                        todayButton=\"Today\"\r\n                        selected={outboundDate}\r\n                        onChange={date => setOutboundDate(date)}\r\n                        required\r\n                    />\r\n                </div>\r\n                { showInboundInput ? <InboundInput /> : <></> }\r\n                <button id=\"search\">Search</button>\r\n            </form>\r\n\r\n            <div id=\"searchOptions\">\r\n                {/* Trip Type Buttons */}\r\n                <div id=\"leftOptions\">\r\n                    <button id=\"roundtrip\"\r\n                            onClick={e => setShowInboundInput(true)}>\r\n                            Roundtrip\r\n                    </button>\r\n                    <button id=\"oneWay\"\r\n                        onClick={e => setShowInboundInput(false)}>\r\n                        One Way\r\n                    </button>\r\n                </div>\r\n\r\n                <div id=\"rightOptions\">\r\n                    {/* Sort Type Selector */}\r\n                    { showFlights ? <SortSelect /> : <></> }\r\n\r\n                    {/* Currency Picker */}\r\n                    <div id=\"currency\">\r\n                        <label htmlFor=\"currencySelect\" className=\"visuallyHidden\">Currency:</label>\r\n                        <Select \r\n                            id=\"currencySelect\"\r\n                            name=\"currencySelect\"\r\n                            defaultValue={{ Code: \"USD\" }}\r\n                            onChange={(option) => setCurrency(option.Code)}\r\n                            options={currencies}\r\n                            getOptionLabel={({ Code }) => Code}\r\n                            getOptionValue={({ Code }) => Code}\r\n                            placeholder=\"Currency\"\r\n                        />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            {/* Flight List */}\r\n            { showFlights ? <Flights flights={flights}/> : <></> }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SearchBar;","export default __webpack_public_path__ + \"static/media/logo.24a3196b.svg\";","import React from 'react';\r\nimport './Header.css';\r\nimport Logo from '../images/logo.svg'\r\n\r\nfunction Header(props) { \r\n    return (\r\n        <div className=\"header\">\r\n            <a href=\"./\">\r\n                <img id=\"logo\" src={Logo} alt=\"Shield with airplane shape cutout.\"/>\r\n            </a>\r\n            <a href=\"./\">\r\n                <h1 id=\"title\">{props.title}</h1>\r\n            </a>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\nimport './App.css';\r\nimport SearchBar from './components/SearchBar';\r\nimport Header from './components/Header'\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Header title=\"Findair\" />\r\n      <div id=\"content\">\r\n        <h1>We’ll Find You The <br /><span>Cheapest Flights</span></h1>\r\n        <SearchBar />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}